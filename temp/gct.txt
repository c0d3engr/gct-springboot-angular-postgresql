============================================
BACKEND - JAVA
============================================
D:\build\java\gct
http://localhost:8080



INSERT INTO account (account_id, account_email, account_name, bcc, zeny, timestamp) 
VALUES ('001', 'account@email.com', 'wetch', '999', '998', '2001-01-01T00:00:00');


INSERT INTO account (account_id, account_email, account_name, bcc, zeny, timestamp) 
VALUES ('002', 'account2@email.com', 'vetch', '999', '998', '2025-06-05T00:06:00');


{
        "accountId": "003",
        "accountName": "test3",
        "accountEmail": "test3@email.com",
        "zeny": "998.0",
        "bcc": "999.0",
        "timestamp" : "2025-06-05T00:00:00"
}



"timestamp": "2025-06-05T00:00:00"

retrieval @getmapping
delete @deletemapping
post @postmapping
put @putmapping


git remote add origin https://github.com/c0d3engr/gct.git
git branch -M main
git push -u origin main



@Application.run
Main
create account
read account
update account
delete account

create list
initiale list values	
fetch values



@Service
AccountService
CharacterService
add account logic
add character logic
List account // store accounts directly to db 
List character // store character directly to db 
// do not write JDBC code inside here, user layer instead class ProductDB (another layer to communicate with db) 

@Entity
Account //represents an entity
accountId
accountEmail
zeny
bcc

@Entity
Character
characterId
charName
charLevel >= 100
charJob

@Entity
User
userId
userEmail
userPw

// write code JDBC 

@RESTController
@RESTgetmapping
AccountController
CharaterController
UserController
https/api


@Respository

===========================================
FRONTEND - REACT
===========================================
fullstack app structure: https://www.youtube.com/watch?v=O_XL9oQ1_To&t=14s
vite: https://www.youtube.com/shorts/Xrgddey8jcA

npm create vite@latest
choose name, react, typscript

cd gct-frontend
npm install
npm run dev

http://localhost:5173/
 


D:\build\java\gct>npx create-react-app gctfrontend



link local repo to github:

git init
git remote -v

git remote add origin https://github.com/c0d3engr/gct-fullstack-springboot-react.git
git branch -M main
git push -u origin main

force update: git push -f origin main

git remote set-url origin https://github.com/c0d3engr/gct-springboot-angular-postgresql.git




src>App.js

create src/api/accountApi.js



https://dashboard.render.com







powershell tree structure:
Function Show-Tree {
    param ($Path, $Indent = "")

    Get-ChildItem -Directory -Path $Path | ForEach-Object {
        "$Indent├── $_" | Out-File -Append structure.txt
        Show-Tree -Path $_.FullName -Indent ("$Indent│   ")
    }
}

# Clear previous structure.txt
Remove-Item structure.txt -ErrorAction Ignore

# Run the tree from current directory
Show-Tree -Path .





===================================================
You are a senior Angular architect. You will be using the following technologies: Java Spring Boot, PostgresSQL, Angular, Tailwin CSS. Github repository of the backend code will be provided. 
Backend endpoints will be provided.

backend github repository with backend RESTAPI endpoints available here: https://github.com/c0d3engr/gct-springboot-angular-postgresql.git

Help me generate a new Angular project from scratch using Angular 19, following strict industry best practices for scalability, maintainability, and enterprise-level development.

Requirements:

1. Use a modular folder structure organized by **features/domains**, not by file types.
2. Implement a **core module** for singleton services and interceptors, and a **shared module** for reusable UI components and pipes.
3. Enable **strict TypeScript mode** and follow consistent file naming and Angular style guide conventions.
4. Include **SCSS** for styling and integrate either Tailwind CSS and Angular Material (I want clean, responsive UI components).
5. Set up **routing with lazy-loaded feature modules** and a **route guard** for authentication.
6. Provide a working **auth flow** (login page, token service, and backend API).
7. Use **RxJS-based service stores** for local state management instead of NgRx (for simplicity).
8. Implement a feature module Dashboard with a list, add, and edit component based off of provided backend API integration.
9. Include a global **HTTP interceptor** to attach a JWT token and handle errors.
10. Configure **unit testing** with Jest and **E2E testing** with Cypress.
11. Add **Prettier, ESLint**, and **Husky** with pre-commit hooks to enforce linting.
12. Setup environment-specific configs with `environment.ts` and `environment.prod.ts`.
13. Add a `README.md` with instructions, and basic project metadata in `package.json`.
14. Project should be scalable, enterprise-ready, clean, well-documented, and testable.

Give me the exact Angular CLI commands, create project called "frontend" which resides inside a gct root folower, see folder structure provided in github repository link, sample file contents, and package installations needed to scaffold this project.

If possible, create a GitHub-ready version that I can use as a professional Angular starter template.



Solution 1: Allow Script Execution Temporarily (Recommended)
Run this command in PowerShell (as Administrator):

powershell
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass



























